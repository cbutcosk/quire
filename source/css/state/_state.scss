// State
// =============================================================================
// The CSS classes defined in this file are intended as modifiers to other
// existing rules. These are the only classes which should be added/removed with
// javascript, although not all rules here need to be JS-dependent.
//
// Most of these rules should be prefixed with .is-* to denote their transient
// state. Javascript may also utilize js-* classes as hooks for elements, but
// these classes should never have any associated style rules.
//
// Rules defined here should be general rules (typically one line only), that
// work the same way regardless of what element they are applied to. To define
// a modifier rule specific to a component, use the -- notation instead; i.e.
// .button--is-primary, etc.
//
// Finally, the .visually-hidden class is a special case. This rule exists for
// accessibilty purposes, so that descriptive elements for visually-impaired
// users can be added to the document in a way that will not impact the design
// for sighted users in any way. The rules below are used instead of a simple
// `display: none` to ensure that screen readers do not ignore the text content
// of these elements. This technique should be considered as a supplement to
// proper use of aria-* and rel attributes, not as a replacement for them.


// .is-primary {}
// .is-disabled {}

.is-visible {
  display: initial;
}

.is-hidden {
  display: none;
}

.visually-hidden {
  clip: rect(1px, 1px, 1px, 1px);
  height: 1px;
  overflow: hidden;
  position: absolute;
  width: 1px;
}
