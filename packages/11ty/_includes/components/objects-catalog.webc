<template webc:nokeep>
  <section class="object-filters">
    <input class="collapsible__checkbox" type="checkbox" id="collapsible-checkbox" />
    <label for="collapsible-checkbox" class="collapsible__toggle"></label>
    <div class="collapsible__panel">
      <object-filters :filters="filters" :objects="objects"></object-filters>
    </div>
    <div class="collapsible__controls">
      <div class="object-filters__controls">
        <button class="object-filters__button object-filters__button--primary" data-control-apply>Apply Filters</button>
        <button class="object-filters__button" data-control-reset>Reset</button>
      </div>
    </div>
  </section>
  <section class="object-cards">
    <object-cards :objects="objects"></object-cards>
  </section>
</template>
<script webc:setup>
const allObjects = this.objects.object_list;

const { filePathStem } = this.page;
const currentDir = filePathStem.split('/').slice(0, -1).join('/');

const objects = this.collections.navigation.reduce(
  (objects, { data }) => {
    const { page, pageObjects } = data;
    const pageDir = page.filePathStem.split('/').slice(0, -1).join('/');
    if (pageObjects && currentDir === pageDir) {
      objects = objects.concat(pageObjects.map((object) => ({ ...object, page })));
    }
    return objects;
  },
  []
);
</script>
<script webc:keep type="text/javascript">
window.customElements.define('objects-catalog', class extends HTMLElement {
  connectedCallback() {
    // set up event handlers
    const filters = this.querySelectorAll('[data-filter]');
    console.warn('FILTERS', filters);
  }
});
const classes = [
  // 'collapsible',
  // 'sticky'
];
window.addEventListener('load', () => {
  const element = document.querySelector('.object-filters');
  element.classList.add(...classes);
  let filtersCount = 0;
  let filtersApplied = false;
  const applyButton = element.querySelector('[data-control-apply]');
  const resetButton = element.querySelector('[data-control-reset]');
  const selects = element.querySelectorAll('select');
  const resetApplyButtonState = () => {
    applyButton.classList.remove('object-filters__button--active');
    applyButton.innerText = `Apply Filters`;
  }
  selects.forEach((select) => {
    select.addEventListener('change', (event) => {
      filtersCount++;
      const { value } = event.target;
      if (value) {
        filtersApplied = true;
        applyButton.classList.add('object-filters__button--active');
        applyButton.innerText = `Apply ${filtersCount} ${filtersCount === 1 ? 'Filter' : 'Filters'}`;
      }
    });
  });
  applyButton.addEventListener('click', () => {
    resetApplyButtonState();
  });
  resetButton.addEventListener('click', () => {
    filtersCount = 0;
    resetApplyButtonState();
    selects.forEach((select) => {
      select.querySelector('option[value=""]').selected = true;
    })
  });
});
</script>
<style>
section.object-cards {
  margin: 1rem;
}

.object-filters {
  --max-height: 25vh;
  padding: 0 28.5px;
  background: #eef2f3;
  display: grid;
  font-family: Noto Sans,sans-serif;
  font-size: 14px;
  color: rgb(51, 51, 51);
}

.object-filters__list {
  padding-top: 1em;
  padding-bottom: 2em;
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(auto, 1fr));
  grid-row-gap: 1.2em;
  grid-column-gap: 3em;
}

.object-filters__item {
  display: grid;
  grid-template-columns: auto;
  grid-gap: 0.5em;
  align-items: end;
  position: relative;
  max-width: 50em;
  justify-self: center;
  width: 100%;
}

.object-filters__item label {
  font-weight: 700;
}

.object-filters__select:after {
  content: "";
  position: absolute;
  width: 0.5em;
  height: 0.9em;
  bottom: 0;
  right: 0.4em;
  pointer-events: none;
  border-left: 0.3em solid transparent;
  border-right: 0.3em solid transparent;
  border-top: 0.4em solid rgb(51, 51, 51);
}

.object-filters__select select,
.object-filters__select select:focus,
.object-filters__select select:focus-visible {
  -webkit-appearance: none;
  border: none;
  border-bottom: 1px solid #d0dbde;
  border-radius: 0;
  color: rgb(51, 51, 51);
  background: transparent;
  height: 1.5em;
  width: 100%;
  min-width: 10em;
  padding: 0 1.4em 0 0;
  font-family: Noto Sans,sans-serif;
  font-size: 14px;
}

.object-filters__controls {
  display: grid;
  grid-column-gap: 1em;
  grid-template-columns: repeat(auto-fit, minmax(max-content, 12em));
  align-items: center;
  justify-content: center;
}

.object-filters__button {
  align-self: center;
  border-radius: 2px;
  border: 1px solid rgb(51, 51, 51);
  background: #eef2f3;
  color: rgb(51, 51, 51);
  font-family: Noto Sans,sans-serif;
  font-size: 14px;
  height: 2em;
  margin-top: 1em;
  padding: 0.1em 2em 0.15em;
  cursor: pointer;
  user-select: none;
}

.object-filters__button.object-filters__button--active {
  background: rgb(51, 51, 51);
  color: white;
}

@media screen and (min-width: 500px) {
  .object-filters__list {
    margin-right: 4em;
  }

  .object-filters__item {
    grid-template-columns: minmax(auto, 1fr) minmax(auto, 2fr);
  }

  .object-filters__item label {
    text-align: right;
  }

  .object-filters__select select,
  .object-filters__select select:focus,
  .object-filters__select select:focus-visible {
    padding: 0 1.4em 0 0.4em;
  }
}

@media screen and (min-width: 700px) {
  .object-filters {
    margin-bottom: 3em;
  }

  .object-filters__list {
    grid-template-columns: repeat(auto-fit, minmax(30em, 1fr));
    margin-right: 8em;
  }
}

.collapsible {
  position: relative;
  display: flex;
  flex-direction: column;
}

.collapsible__checkbox {
  display: none;
}

.collapsible__toggle {
  height: 1em;
  order: 2;
}

.collapsible .collapsible__toggle {
  position: relative;
  left: 50%;
  background: linear-gradient(0deg, rgba(238,242,243,1) 0%, rgba(238,242,243,1) 33%, rgba(238,242,243,0) 100%);
  height: 2em;
  width: 100%;
  z-index: 1;
  bottom: 0;
  transition: bottom .3s ease-in-out;
  cursor: pointer;
}

.collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__toggle {
  transform: translate(-50%, -100%);
  margin-bottom: -1em;
}

.collapsible .collapsible__checkbox:checked ~ .collapsible__toggle {
  transform: translate(-50%, -0%);
  margin-bottom: 1em;
}

.collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__toggle:hover {
  bottom: -0.4em;
}

.collapsible .collapsible__checkbox:checked ~ .collapsible__toggle:hover {
  bottom: 0.4em;
}

.collapsible .collapsible__toggle::before {
  position: absolute;
  bottom: 0;
  left: 50%;
  display: inline-block;
  background: #d0dbde;
  padding: 0.2em 0.5em;
  border-radius: 2px;
  color: rgb(51, 51, 51);
  font-size: 75%;
  transform: translate(-50%, 0);
  transition-property: background color;
  transition-duration: 0.4s;
  transition-timing-function: ease-in-out;
}

.collapsible .collapsible__toggle:hover::before {
  background: rgb(51, 51, 51);
  color: white;
}

.collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__toggle::before {
  content: 'Show All Filters';
}

.collapsible .collapsible__checkbox:checked ~ .collapsible__toggle::before {
  content: 'Hide Filters';
}

.collapsible .collapsible__toggle::after {
  content: "";
  position: absolute;
  left: 50%;
  transform: translate(-50%, 100%);
  display: inline-block;
  border-left: 0.6em solid transparent;
  border-right: 0.6em solid transparent;
  transition-property: border-top-color border-bottom-color;
  transition-duration: 0.4s;
  transition-timing-function: ease-in-out;
}

.collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__toggle::after {
  bottom: 0;
  border-top: 0.3em solid #d0dbde;
}

.collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__toggle:hover::after {
  border-top-color: rgb(51, 51, 51);
}

.collapsible .collapsible__checkbox:checked ~ .collapsible__toggle::after {
  top: 0;
  border-bottom: 0.3em solid #d0dbde;
}

.collapsible .collapsible__checkbox:checked ~ .collapsible__toggle:hover::after {
  border-bottom-color: rgb(51, 51, 51);
}

.collapsible__panel {
  display: flex;
  flex-direction: column;
  order: 1;
}

.collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__panel {
  height: 12.5em;
}

.collapsible__controls {
  order: 3;
}

.collapsible .collapsible__panel {
  overflow: hidden;
}

.collapsible .collapsible__checkbox:checked ~ .collapsible__panel {
  height: unset;
}

@media screen and (min-width: 500px) {
  .collapsible .collapsible__checkbox:not(:checked) ~ .collapsible__panel {
    height: 8.4em;
  }
}

.object-filters.sticky {
  position: sticky;
  z-index: 1;
  top: 50px;
}

.sticky .object-filters__list {
  padding-bottom: 1em;
}

.collapsible.sticky .object-filters__list {
  max-height: var(--max-height);
  overflow-y: scroll;
}
</style>
