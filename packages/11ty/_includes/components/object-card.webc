<a class="object-card" href="this.webc.attributes.url">
  <div class="object-card__content" @html="renderFields({ ...this.webc.attributes, $data: this.$data })"></div>
</a>

<script webc:setup>
const renderFields = (objectCardAttributes) => {
  const { $data, figures } = objectCardAttributes;
  const ignoredAttributes = ['uid', 'url'];
  const isIgnoredAttribute = (key) => !ignoredAttributes.includes(key);
  const attributeOrder = $data.object_card || $data.objects.object_card || Object.keys(objectCardAttributes).filter(isIgnoredAttribute);
  const attributes = attributeOrder.map((key) => ({ name: key, value: objectCardAttributes[key]}));
  const firstTextAttribute = attributes.find(({ name }) => name !== 'thumbnail');
  const alt = () => typeof thumbnail === 'object' ? thumbnail.alt : '';
  /**
   * If the object has figures, set thumbnail as the first image figure thumbnail.
   * Otherwise use a thumbnail defined in object data
   */
  const src = () => {
    const thumbnail = figures
      ? figures.find(({ mediaType }) => mediaType === 'image').thumbnail
      : objectCardAttributes.thumbnail

    const src = typeof thumbnail === 'object'
      ? thumbnail.src
      : thumbnail

    /**
     * If no IIIF images, point to the raw assets directory
     */
    return src && !src.startsWith('/iiif')
      ? `${this.config.figures.imageDir}/${src}`
      : src;
  }

  return attributes.map(({ name, value }) => {
    const nameAttribute = `data-field-name="${name}"`
    switch (true) {
      /**
       * Render a thumbnail image for the `thumbnail` attribute
       */
      case name === 'thumbnail':
        return `<figure class="object-card__image" ${nameAttribute}><img src="${src()}" alt="${alt()}"></figure>`
      /**
       * Render different markup for the first text attribute
       */
      case name === firstTextAttribute.name:
        return `
          <span class=object-card__title ${nameAttribute}>
            ${value}
            <span class="arrow" data-outputs-exclude="epub,pdf">
              <svg data-outputs-exclude="epub,pdf">
                <switch>
                  <use xlink:href="#arrow-forward-icon"></use>
                </switch>
              </svg>
            </span>
          </span>`;
      /**
       * Render default markup for an attribute
       */
      case objectCardAttributes.hasOwnProperty(name) && !!value:
        return `<span class="object-card__field" ${nameAttribute}>${value}</span>`;
      default:
        return '';
    }
    return fields;
  }).join('');
};
</script>

<style>
.object-card {
  display: block;
  border-radius: 2px;
  box-shadow: none;
  background-color: #ffffff;
  color: #CF4747;
}

.object-card:hover {
  color: #a02a2a;
}

.object-card__image img {
  -webkit-transition: -webkit-box-shadow 0.35s;
  transition: box-shadow 0.35s;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  width: 100%;
}

.object-card:hover .object-card__image img {
  -webkit-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
  box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
}

.object-card__content {
  display: flex;
  flex-direction: column;
  padding: 1.5em;
}

.object-card__title,
.object-card .arrow {
  font-size: 1.125em;
  line-height: 1.22em;
  font-family: "IBM Plex Sans Condensed", sans-serif;
  font-weight: 700;
}

.object-card__title:not(:last-child),
.object-card__image:not(:last-child) {
  margin-bottom: 1em;
}

.object-card .arrow {
  margin-left: 4px;
  position: absolute;
  fill: #CF4747;
  transition: all .25s ease;
}

.object-card:hover .arrow {
  transform: translate(0.75em);
  -webkit-transition: all .25s ease;
  fill: #a02a2a;
}

.object-card .arrow svg {
  width: 18px;
  height: 18px;
}

.object-card__field {
  color: rgb(51, 51, 51);
}
</style>
