<script webc:type="js">
const ignoredAttributes = ['imagePath', 'uid', 'url'];
const objectCardFieldOrder = this.$data.objects.object_card ||
  Object.keys(this.webc.attributes).filter((key) => !ignoredAttributes.includes(key));
const attributes = Object
  .entries(this.webc.attributes)
  .filter(([key, value]) => objectCardFieldOrder.includes(key) &&
    value !== '[object Object]' &&
    !value.includes('[object Object]'));
const firstTextAttribute = attributes.find(([key]) => key !== 'thumbnail');
const renderFields = () => {
  return objectCardFieldOrder.reduce((fields, key) => {
    const value = this.webc.attributes[key];
    const renderedValue = value.split(',').map(this.markdownify).join(', ');
    switch (true) {
      case value === '[object Object]' || value.includes('[object Object]'):
        break;
      /**
       * Render a thumbnail image for the `thumbnail` attribute
       */
      case key === 'thumbnail':
        fields += `<figure class="object-card__image"><img src="${imagePath}" alt="${firstTextAttribute[1]}"></figure>`
        break;
      /**
       * Render different markup for the first text attribute
       */
      case key === firstTextAttribute[0]:
        fields += `
          <span class=object-card__title>
            ${renderedValue}
            <span class="arrow" data-outputs-exclude="epub,pdf">
              <svg data-outputs-exclude="epub,pdf">
                <switch>
                  <use xlink:href="#arrow-forward-icon"></use>
                </switch>
              </svg>
            </span>
          </span>`;
        break;
      default:
        fields += `<span class="object-card__field">${renderedValue}</span>`;
        break;
    }
    return fields;
  }, '');
};
`
<a class="object-card" href="${url}">
  <div class="object-card__content">
    ${renderFields()}
  </div>
</a>
`;
</script>
<style>
.object-card {
  display: block;
  border-radius: 2px;
  box-shadow: none;
  background-color: #ffffff;
  color: #CF4747;
}

.object-card:hover {
  color: #a02a2a;
}

.object-card__image img {
  -webkit-transition: -webkit-box-shadow 0.35s;
  transition: box-shadow 0.35s;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  width: 100%;
}

.object-card:hover .object-card__image img {
  -webkit-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
  box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
}

.object-card__content {
  display: flex;
  flex-direction: column;
  padding: 1.5em;
}

.object-card__title,
.object-card .arrow {
  font-size: 1.125em;
  line-height: 1.22em;
  font-family: "IBM Plex Sans Condensed", sans-serif;
  font-weight: 700;
}

.object-card__title:not(:last-child),
.object-card__image:not(:last-child) {
  margin-bottom: 1em;
}

.object-card .arrow {
  margin-left: 4px;
  position: absolute;
  fill: #CF4747;
  transition: all .25s ease;
}

.object-card:hover .arrow {
  transform: translate(0.75em);
  -webkit-transition: all .25s ease;
  fill: #a02a2a;
}

.object-card .arrow svg {
  width: 18px;
  height: 18px;
}

.object-card__field {
  color: rgb(51, 51, 51);
}
</style>
