<a class="object-card" href="this.webc.attributes.url">
  <div class="object-card__content">
    <template webc:for="attribute of getAttributes(this.webc.attributes, this.$data)" webc:nokeep>
      <figure webc:if="isThumbnailAttribute(attribute)" class="object-card__image" :data-field-name="attribute.name">
        <img :src="src(this.webc.attributes)" alt="alt(this.webc.attributes)">
      </figure>
      <span webc:elseif="isFirstTextAttribute(attribute, this.webc.attributes, this.$data)" class=object-card__title :data-field-name="attribute.name">
        <span @html="attribute.value"></span>
        <span class="arrow" data-outputs-exclude="epub,pdf">
          <svg data-outputs-exclude="epub,pdf">
            <switch>
              <use xlink:href="#arrow-forward-icon"></use>
            </switch>
          </svg>
        </span>
      </span>
      <span webc:else class="object-card__field" @html="attribute.value"></span>
    </template>
  </div>
</a>

<script webc:setup>
/**
 * Get object image `alt` from `thumbnail` property
 */
const alt = ({ thumbnail }) => typeof thumbnail === 'object' ? thumbnail.alt : '';

/**
 * Get object image `src` from `figures` or `thumbnail` properties
 */
const src = ({ data }) => {
  const { figures } = data;
  const thumbnail = figures
    ? figures.find(({ mediaType }) => mediaType === 'image').thumbnail
    : data.thumbnail

  const src = typeof thumbnail === 'object'
    ? thumbnail.src
    : thumbnail

  /**
   * If no IIIF images, point to the raw assets directory
   */
  return src && !src.startsWith('/iiif')
    ? `${this.config.figures.imageDir}/${src}`
    : src;
};

/**
 * Finds the first object property that is not `thumbnail`
 */
const isFirstTextAttribute = ({ name }, { data }, { object_card, objects }) => {
  const attributes = getAttributes({ data }, { object_card, objects });
  return name === attributes.find(({ name }) => name !== 'thumbnail').name;
};

const isThumbnailAttribute = ({ name }) => name === 'thumbnail';

const isString = (value) => typeof value === 'string';

const everyItemValueIsString = (value) => {
  return Array.isArray(value) && value.every(isString)
};

/**
 * This iterates over objectData, filtering out arbitrary Object-type properties
 * and markdownifying all property values, including arrays of values.
 */
const getMarkdownifiedProperties = (objectData) => {
  return Object.entries(objectData).reduce((data, [key, value]) => {
    switch (true) {
      case isString(value):
        data[key] = this.markdownify(value);
        break;
      case everyItemValueIsString(value):
        data[key] = value.map(this.markdownify);
        break;
      default:
        break;
    }
    return data
  }, {});
};

const getAttributes = ({ data }, { object_card, objects }) => {
  const ignoredAttributes = ['uid', 'url'];
  const isIgnoredAttribute = (key) => !ignoredAttributes.includes(key);
  const attributeOrder = object_card || objects.object_card || Object.keys(data).filter(isIgnoredAttribute);
  return attributeOrder.map((key) => ({ name: key, value: getMarkdownifiedProperties(data[key])}));
};
</script>

<style>
.object-card {
  display: block;
  border-radius: 2px;
  box-shadow: none;
  background-color: #ffffff;
  color: #CF4747;
}

.object-card:hover {
  color: #a02a2a;
}

.object-card__image img {
  -webkit-transition: -webkit-box-shadow 0.35s;
  transition: box-shadow 0.35s;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  width: 100%;
}

.object-card:hover .object-card__image img {
  -webkit-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
  -moz-box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
  box-shadow: 0px 0px 6px 0px rgba(0, 0, 0, 0.75);
}

.object-card__content {
  display: flex;
  flex-direction: column;
  padding: 1.5em;
}

.object-card__title,
.object-card .arrow {
  font-size: 1.125em;
  line-height: 1.22em;
  font-family: "IBM Plex Sans Condensed", sans-serif;
  font-weight: 700;
}

.object-card__title:not(:last-child),
.object-card__image:not(:last-child) {
  margin-bottom: 1em;
}

.object-card .arrow {
  margin-left: 4px;
  position: absolute;
  fill: #CF4747;
  transition: all .25s ease;
}

.object-card:hover .arrow {
  transform: translate(0.75em);
  -webkit-transition: all .25s ease;
  fill: #a02a2a;
}

.object-card .arrow svg {
  width: 18px;
  height: 18px;
}

.object-card__field {
  color: rgb(51, 51, 51);
}
</style>
