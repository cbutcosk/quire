<script webc:type="js">
const { filters } = this.webc.attributes;
/**
 * If all filters are being rendered, ignore these object attributes
 * TODO: make this list configurable
 */
const ignoredAttributes = ['figure', 'id', 'imagePath', 'link', 'name', 'objectName', 'thumbnail', 'title', 'url'];
const filterNames = filters
  ? filters
    .split(',')
    .map((filterName) => filterName.trim())
  : objects.reduce((filterNames, object) => {
    Object.entries(object).forEach(([key, value]) => {
      /**
       * Only render filters for keys:
       * - that are not duplicates
       * - are not ignored attributes
       * - are either strings, numbers, or arrays of strings or numbers
       */
      if (
        !filterNames.includes(key) &&
        !ignoredAttributes.includes(key) &&
        (
          typeof value === 'string' ||
          typeof value === 'number' ||
          (Array.isArray(value) && value.every(
            (item) => typeof item === 'string' ||
              typeof item === 'number'
          ))
        )
      ) {
        filterNames.push(key);
      }
    });
    return filterNames;
  }, []);

const getFilterElements = () => filterNames
  .map((filterName) => {
    const filterOptions = [
      { label: 'All', value: '' },
      ...objects
        .reduce((uniqueOptions, object) => {
          const existingValues = uniqueOptions.map(({ value }) => value);
          const values = !Array.isArray(object[filterName])
            ? [object[filterName]]
            : object[filterName];

          values.forEach((value) => {
            if (value && !existingValues.includes(value)) {
              uniqueOptions.push({ label: value, value });
            }
          })

          return uniqueOptions;
        }, [])
        .sort((a, b) => {
          return a.value > b.value ? 1 : -1;
        })
    ];

    const getFilterOptionElements = () => filterOptions.map((option) => {
      return `<option value="${option.value}">${option.label}</option>`;
    }).join('');

    return `
      <div class="object-filters__item">
        <label for="object-type">${filterName}:</label>
        <div class="object-filters__select">
          <select name="${filterName}" id="filter-${filterName}" data-control-filter>
            ${getFilterOptionElements()}
          </select>
        </div>
      </div>
    `
  })
  .join('');

`<div class="object-filters__list">${getFilterElements()}</div>`
</script>
